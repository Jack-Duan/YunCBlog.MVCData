@model YunCBlog.MVCData.Areas.Admin.Models.PubViewModels.AccessListViewModel

@{
    ViewBag.Title = "CreateMenu";
    //Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    Layout = null;
}
@Styles.Render("~/Admin/css")
@Scripts.Render("~/admin/layui")
@Scripts.Render("~/admin/js")


<div class="layui-fluid">
    <div class="layui-row">
        @using (Html.BeginForm("CreateAccess", "Pub", FormMethod.Post, new { @class = "layui-form" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "layui-form-label" })
            
            <div class="layui-form-item">
                @Html.LabelFor(model => model.Remote_Addr, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Remote_Addr, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Remote_Addr, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.IP, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.IP, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.IP, "", new { @class = "x-red" })
                </div>
            </div>

            <div class="layui-form-item">
                @Html.LabelFor(model => model.Remote_Host, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Remote_Host, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Remote_Host, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.Http_Referer, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Http_Referer, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Http_Referer, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.Server_Port, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Server_Port, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Server_Port, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.Browser, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Browser, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Browser, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.MajorVersion, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.MajorVersion, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.MajorVersion, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.Platform, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Platform, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Platform, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.Local_Addr, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Local_Addr, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Local_Addr, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.Server_Name, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Server_Name, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Server_Name, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.PageName, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.PageName, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.PageName, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.RealmName, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.RealmName, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.RealmName, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.DisOrder, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.DisOrder, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.DisOrder, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.IsRemoved, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.IsRemoved, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.IsRemoved, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                <label for="L_repass" class="layui-form-label">
                </label>
                <button class="layui-btn" lay-filter="add" lay-submit="">
                    增加
                </button>
            </div>
        }
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


@*@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>AccessListViewModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.AccessId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AccessId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AccessId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Remote_Addr, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Remote_Addr, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Remote_Addr, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IP, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IP, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IP, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Remote_Host, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Remote_Host, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Remote_Host, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Http_Referer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Http_Referer, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Http_Referer, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Server_Port, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Server_Port, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Server_Port, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Browser, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Browser, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Browser, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MajorVersion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MajorVersion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MajorVersion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Platform, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Platform, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Platform, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Local_Addr, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Local_Addr, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Local_Addr, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Server_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Server_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Server_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PageName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PageName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PageName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RealmName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RealmName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RealmName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GuId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GuId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GuId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DisOrder, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DisOrder, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DisOrder, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreateTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreateTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreateTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsRemoved, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IsRemoved, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IsRemoved, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
