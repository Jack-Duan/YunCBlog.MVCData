@model YunCBlog.MVCData.Areas.Admin.Models.ArticleViewModels.ArticleViewModel

@{
    ViewBag.Title = "Edit";
    //Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    Layout = null;
}
@Styles.Render("~/Admin/css")
@Scripts.Render("~/admin/layui")
@Scripts.Render("~/admin/js")


<div class="layui-fluid">
    <div class="layui-row">

        @using (Html.BeginForm("Edit", "Article", FormMethod.Post, new { @class = "layui-form layui-form-pane" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "x-red" })

            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.ArticleId, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.ArticleId, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.ArticleId, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.ArticleTypeLinkId, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.ArticleTypeLinkId, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.ArticleTypeLinkId, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.MarkDownContent, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.MarkDownContent, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.MarkDownContent, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.WordNumber, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.WordNumber, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.WordNumber, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.ReadCount, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.ReadCount, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.ReadCount, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.LikeCount, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.LikeCount, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.LikeCount, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.TipCount, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.TipCount, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.TipCount, "", new { @class = "x-red" })
                </div>
            </div>

            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.ReprintCount, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.ReprintCount, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.ReprintCount, "", new { @class = "x-red" })
                </div>
            </div>

            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.IsPrivate, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.IsPrivate, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.IsPrivate, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.IsTop, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.IsTop, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.IsTop, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.DisOrder, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.DisOrder, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.DisOrder, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item " style="display:none;">
                @Html.LabelFor(model => model.IsRemoved, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.IsRemoved, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.IsRemoved, "", new { @class = "x-red" })
                </div>
            </div>




            <div class="layui-form-item layui-form-text">
                @Html.LabelFor(model => model.Theme, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-block">
                    @Html.TextAreaFor(model => model.Theme, new { @class = "layui-textarea" })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Theme, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item ">
                @Html.LabelFor(model => model.ArticleModuleId, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.ArticleModuleId, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.ArticleModuleId, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item ">
                @Html.LabelFor(model => model.CoverName, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.CoverName, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.CoverName, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item ">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item layui-form-text">
                @Html.LabelFor(model => model.HtmlContent, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-block">
                    @Html.TextAreaFor(model => model.HtmlContent)
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.HtmlContent, "", new { @class = "x-red" })
                </div>
            </div>

            <div class="layui-form-item" style="display:none;">
                @Html.LabelFor(model => model.TextContent, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.TextContent, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.TextContent, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.IsPublish, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.IsPublish, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.IsPublish, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                @Html.LabelFor(model => model.IsCanReprint, htmlAttributes: new { @class = "layui-form-label" })
                <div class="layui-input-inline">
                    @Html.EditorFor(model => model.IsCanReprint, new { htmlAttributes = new { @class = "layui-input" } })
                </div>
                <div class="layui-form-mid layui-word-aux">
                    @Html.ValidationMessageFor(model => model.IsCanReprint, "", new { @class = "x-red" })
                </div>
            </div>
            <div class="layui-form-item">
                <button class="layui-btn" id="submit" lay-filter="add" lay-submit="">
                    保存
                </button>
            </div>

        }

    </div>
</div>

<script>
    layui.use(['layedit', 'layer', 'jquery'], function () {
        var $ = layui.jquery;
        var layedit = layui.layedit;
        layedit.set({
            //暴露layupload参数设置接口 --详细查看layupload参数说明
            uploadImage: {
                url: '/Admin/AttachMent/UploadFile',
                accept: 'image',
                acceptMime: 'image/*',
                exts: 'jpg|png|gif|bmp|jpeg|gif',
                size: '10240'
            }
            , uploadVideo: {
                url: '/Admin/AttachMent/UploadFile',
                accept: 'video',
                acceptMime: 'video/*',
                exts: 'mp4|flv|avi|rm|rmvb',
                size: '20480'
            }
            //右键删除图片/视频时的回调参数，post到后台删除服务器文件等操作，
            //传递参数：
            //图片： imgpath --图片路径
            //视频： filepath --视频路径 imgpath --封面路径
            , calldel: {
                url: '/Attachment/DeleteFile'
            }
            //开发者模式 --默认为false
            , devmode: true
            //插入代码设置
            , codeConfig: {
                hide: true,  //是否显示编码语言选择框
                default: 'javascript' //hide为true时的默认语言格式
            }
            , tool: [
                'html', 'code', 'strong', 'italic', 'underline', 'del', 'addhr', '|', 'fontFomatt', 'colorpicker', 'face'
                , '|', 'left', 'center', 'right', '|', 'link', 'unlink', 'image_alt', 'video', 'anchors'
                , '|', 'fullScreen'
            ]
            , height: '500px'
        });
        var ieditor = layedit.build("HtmlContent");
        $("#submit").click(function () {
            var html = layedit.getContent(ieditor)
            var text = layedit.getText(ieditor)
            $("#TextContent").val(text);
            $("#HtmlContent").val(html);
            return true;
        });

    })
</script>
